Example ./apollo4b_blue_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_firmware_update/README.txt
 
Name:
=====
 ble_firmware_update


Description:
============
 This is the application just for updating built-in BLE firmware into Cooper.





******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_adv_ext/README.txt
 
Name:
=====
 ble_freertos_adv_ext


Description:
============
 ARM Cordio BLE - Advertising Extension Application Example.


Purpose:
========
This example implements advertising extension within the FreeRTOS
framework. To verify extended advertising working routines.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_amdtpc/README.txt
 
Name:
=====
 ble_freertos_amdtpc


Description:
============
 ARM Cordio BLE - AMDTP Client (Master) Example.


Purpose:
========
This example is the client (master) for the BLE Ambiq Micro
Data Transfer Protocol. This example is meant to run on an Apollo4 EVB
along with another Apollo4 EVB running ble_freertos_amdtps as the server.
This example provides a UART command line interface with a simple menu
that allows the user to scan, connect and initiate data transfers from
either M->S or S->M direction.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_amdtps/README.txt
 
Name:
=====
 ble_freertos_amdtps


Description:
============
 AMDTP example.





******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_amota/README.txt
 
Name:
=====
 ble_freertos_amota


Description:
============
 ARM Cordio BLE - Ambiq Micro Over the Air (AMOTA) Example.


Purpose:
========
This example implements Ambiq Micro Over-the-Air (OTA) slave.  This
example is designed to allow loading of a binary software update from either
and iOS or Android phone running Ambiq's application.  This example works
with the Apollo4 Secure Bootloader (SBL) to place the image in flash and then
reset the Apollo4 to allow SBL to validate and install the image.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.

Additional Information:
=======================
The directory \tools\apollo4_amota\scripts contains a Makefile which will
build the OTA binary.

The directory \docs\app_notes\amota explains how to use the Ambiq iOS and
Android applications.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_ancs/README.txt
 
Name:
=====
 ble_freertos_ancs


Description:
============
 ARM Cordio BLE - Apple Notification Center Service (ANCS) Example.


Purpose:
========
This example implements a BLE Apple Notification Center Service
profile.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_assettag/README.txt
 
Name:
=====
 ble_freertos_assettag


Description:
============
 ARM Cordio BLE - Asset tag Application Example.


Purpose:
========
This example implements a BLE asset tag application within the
FreeRTOS framework. This example can work as a slave connecting with
ble_freertos_locator. Then reports IQ data with AoA type to master after
receiving the CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_barebone/README.txt
 
Name:
=====
 ble_freertos_barebone


Description:
============
 Example of the ble_freertos_barebone app running under FreeRTOS.


This example implements a BLE barebone proejct within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the non-"lp" version of this example enables
them by default).  To enable debug printing, add the following project-level
macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_eatt_fit/README.txt
 
Name:
=====
 ble_freertos_eatt_fit


Description:
============
 ARM Cordio BLE - EATT Fit Application Example.


Purpose:
========
This example similar to BLE Fit example but performs the
EATT connection on PSM and CID.
implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_eatt_watch/README.txt
 
Name:
=====
 ble_freertos_eatt_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example similar to ble_freertos_watch but performs the EATT
connection on PSM and CID.
demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_eatt_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_fcc_test/README.txt
 
Name:
=====
 ble_freertos_fcc_test


Description:
============
 ARM Cordio BLE - FCC test example


Purpose:
========
This example is used to put Bluetooth radio in Apollo4 into various
test mode on different channels on pressing BTN1 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_fit/README.txt
 
Name:
=====
 ble_freertos_fit


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_locator/README.txt
 
Name:
=====
 ble_freertos_locator


Description:
============
 ARM Cordio BLE - Locator Application Example.


Purpose:
========
This example implements a BLE locater application within the FreeRTOS
framework. The locator will work as master to connect the asset tag device and
receive IQ data by sending CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.
Press button0 of Apollo4 EVB to scan/connect the asset tag device.
Press button1 of Apollo4 EVB to start CTE request after connection.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_peripheral_l2cap_coc/README.txt
 
Name:
=====
 ble_freertos_l2cap_coc


Description:
============
 ARM Cordio BLE - L2CAP CoC peripheral demo Example.


Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_throughput/README.txt
 
Name:
=====
 ble_freertos_throughput


Description:
============
 ARM Cordio BLE - Ambiq Micro Throughput Example.


Purpose:
========
This example implements is designed to test the data transmitting
and receiving thourghput. The example needs to be connected with the Ambiq BLE
Test APP (only Android now), then sends data to the APP by Notify method (Uplink)
or receives data from APP by Write Command method (Downlink) to check the rate
showed in the APP screen. The default MTU is 23 and PHY is 1M, you can request
the MTU exchange and PHY change through the settings of APP.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_txpower_ctrl/README.txt
 
Name:
=====
 ble_freertos_txpower_ctrl


Description:
============
 ARM Cordio BLE - Transmit Power Control Example


Purpose:
========
This example demonstrates the control of BLE TX power level based
on pressing Button #0 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/ble_freertos_watch/README.txt
 
Name:
=====
 ble_freertos_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/ble/uart_ble_bridge/README.txt
 
Name:
=====
 uart_ble_bridge


Description:
============
 Converts UART HCI commands to SPI.


This exapmle can be used as a way to communicate by using UART HCI between
the Apollo4 (host) and Cooper (controller).


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/ble_freertos_fit_lp/README.txt
 
Name:
=====
 ble_freertos_fit_lp


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4b_blue_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/usb/tinyusb_cdc/README.txt
 
Name:
=====
 tinyusb_cdc


Description:
============
 tinyusb cdc-acm example.


This example demonstrates how to use the USB CDC-ACM device class. it will
echo back the the input from the terminal tool.




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/usb/tinyusb_cdc_dual_ports/README.txt
 
Name:
=====
 tinyusb_cdc_dual_ports


Description:
============
 tinyusb two cdc-acm composite USB example.


This example demonstrates how to add two USB CDC-ACM COM ports. it will echo
back the the input from one terminal and copy the input to another terminal
at the same time.




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/usb/tinyusb_cdc_msc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/usb/tinyusb_cdc_msc_freertos/README.txt
 
Name:
=====
 tinyusb_cdc_msc_freertos


Description:
============
 tinyusb cdc-acm and mass storage FreeRTOS USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux. The CDC-ACM and Mass storage
functions will be handled by two separate FreeRTOS tasks.




******************************************************************************


 
Example ./apollo4b_blue_evb/examples/usb/tinyusb_hid_generic/README.txt
 
Name:
=====
 tinyusb_hid_generic


Description:
============
 tinyusb hid example.


This example demonstrates the USB generic HID function, it will echo back the
the report from HID OUT endpoint to USB host via HID IN endpoint.




******************************************************************************


 
Example ./apollo4b_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4b_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4b_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4b_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4b_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4b_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4b_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4b_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4b_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4b_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4b_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4b_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4b_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4b_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4b_evb/examples/usb/tinyusb_cdc/README.txt
 
Name:
=====
 tinyusb_cdc


Description:
============
 tinyusb cdc-acm example.


This example demonstrates how to use the USB CDC-ACM device class. it will
echo back the the input from the terminal tool.




******************************************************************************


 
Example ./apollo4b_evb/examples/usb/tinyusb_cdc_dual_ports/README.txt
 
Name:
=====
 tinyusb_cdc_dual_ports


Description:
============
 tinyusb two cdc-acm composite USB example.


This example demonstrates how to add two USB CDC-ACM COM ports. it will echo
back the the input from one terminal and copy the input to another terminal
at the same time.




******************************************************************************


 
Example ./apollo4b_evb/examples/usb/tinyusb_cdc_msc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4b_evb/examples/usb/tinyusb_cdc_msc_freertos/README.txt
 
Name:
=====
 tinyusb_cdc_msc_freertos


Description:
============
 tinyusb cdc-acm and mass storage FreeRTOS USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux. The CDC-ACM and Mass storage
functions will be handled by two separate FreeRTOS tasks.




******************************************************************************


 
Example ./apollo4b_evb/examples/usb/tinyusb_hid_generic/README.txt
 
Name:
=====
 tinyusb_hid_generic


Description:
============
 tinyusb hid example.


This example demonstrates the USB generic HID function, it will echo back the
the report from HID OUT endpoint to USB host via HID IN endpoint.




******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/bm_sdmmc_sdio/emmc_bm_fatfs/README.txt
 
Name:
=====
 emmc_bm_fatfs


Description:
============
 eMMC bare-metal FatFs example.


Purpose:
========
This example demonstrates how to use file system with eMMC device
based on the eMMC bare-metal HAL.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/bm_sdmmc_sdio/emmc_bm_rpmb/README.txt
 
Name:
=====
 emmc_bm_rpmb


Description:
============
 emmc rpmb example.


Purpose:
========
This example demonstrates how to use APIs in eMMC RPMB driver
to access RPMB partition.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/bm_sdmmc_sdio/emmc_raw_block_read_write/README.txt
 
Name:
=====
 emmc_raw_block_read_write


Description:
============
 emmc raw block read and write example.


Purpose:
========
This example demonstrates how to blocking PIO and DMA read & write
APIs with eMMC device.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/dbi2dsi_test/README.txt
 
Name:
=====
 dbi2dsi_test


Description:
============
 DSI example.


This example demonstrates how to drive a MIPI DSI panel.

1-lane DSI includes 4 signals,
* Differential clock lane - positive (CLKP)
* Differential clock lane - negative (CLKN)
* Differential data lane 0 - positive (D0P)
* Differential data lane 0 - negative (D0N).



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/dsi_power_test/README.txt
 
Name:
=====
 dsi_power_test


Description:
============
 DSI example.


This example demonstrates DSI power saving sequence.



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/dsi_rw_command/README.txt
 
Name:
=====
 dsi_rw_command


Description:
============
 DSI example.


This example demonstrates how to read and write RM67162 display registers with DSI.

1-lane DSI includes 4 signals,
* Differential clock lane - positive (CLKP)
* Differential clock lane - negative (CLKN)
* Differential data lane 0 - positive (D0P)
* Differential data lane 0 - negative (D0N).



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemadc_4layer/README.txt
 
Name:
=====
 nemadc_4layer


Description:
============
 NemaDC example.


This example demonstrates DC 4 layers overlay with global alpha blending.
* Layer0 - Red image
* Layer1 - Green image
* Layer2 - Blue image
* Layer3 - Yellow image
Global alpha value can be changed in layer*.alpha. Blendmode can be changed
in layer*.blendmode.

This example can work at two different SPI interfaces. When defined ENABLE_SPI4
in preprocessor defined symbols, this example drives panel through SPI4 interface.
When defined ENABLE_QSPI in preprocessor defined symbols, this example drives
panel through QSPI interface.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemadc_darkening_effect/README.txt
 
Name:
=====
 nemadc_darkening_effect


Description:
============
 Darkening effect example.


This example demonstrates how to implement pull-down menu and darkening effects with DC.
This example only supports MIPI DSI interface.



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemadc_scrolling_effect/README.txt
 
Name:
=====
 nemadc_scrolling_effect


Description:
============
 Scrolling effect example.


This example demonstrates how to implement scrolling effect with DC.
This example only supports MIPI DSI interface.



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_balls_bench/README.txt
 
Name:
=====
 nemagfx_balls_bench


Description:
============
 NemaGFX example.

This example created some random balls with alpha blending on the screen,
use
#define MAX_CIRCLE_NUM               (15)
to choose how many balls rendering on the screen

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.
@addtogroup graphics
@ingroup apollo4 graphics
@{


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_benchmarks/README.txt
 
Name:
=====
 nemagfx_benchmarks


Description:
============
 NemaGFX example.


this example demonstrate the Nema GPU and CPU performance use Nema GPU's
basic characteristics, we should care about the FPS after each individual
test.
need a timer to get the accurate time past.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_blend/README.txt
 
Name:
=====
 nemagfx_blend


Description:
============
 NemaGFX example.

brief Example that demonstrates blend feature
Blending requires a series of calculations between the source (foreground)
and destination (background)color fragments for producing the final color,
which will be written in memory.This example use a constent table inside
most of the supported blending mode.demonstrates each more every 1 second.
the dst color is nema_rgba(0xff, 0, 0, 0x80), which is red color with 50%
alpha blending, the src color is nema_rgba(0, 0, 0xff, 0x80), which is blue
color with 50% alpha blending.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_coverflow/README.txt
 
Name:
=====
 nemagfx_coverflow


Description:
============
 nemagfx_coverflow example.

this exampe demostration software AA at the edge of the picture


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_font_render/README.txt
 
Name:
=====
 nemagfx_font_render


Description:
============
 nemagfx_font_render example.


this example demonstrate 8 types of font,from alphabet to symbol,then to chinese.
with different alignment.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_gauge/README.txt
 


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_grad/README.txt
 
Name:
=====
 nemagfx_grad


Description:
============
 NemaGFX example.

In computer graphics, a color gradient specifies a range of position-dependent
colors, usually used to fill a region. For example, many window managers
allow the screen background to be specified as a gradient. The colors
produced by a gradient vary continuously with the position, producing smooth
color transitions.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_nemagui_ambiq_logo/README.txt
 
Name:
=====
 nemagfx_nemagui_ambiq_logo


Description:
============
 Example of the app running under NemaGFX gauge examples.

There is a guiBuilder
project file located in "src/NemaGUI_Builder_project", please use Nema guiBuilder
version 1.0.1 or higher to open it. If you have some application level
modifition from the guiBuilder and you want to demonstrate it on the board,
you need perform flowing two steps

1. copy the files from "src/NemaGUI_Builder_project/generated" into
"src/generated" except two source file should examine, those are
framebuffers.c
main.c

2. porting “framebuffers.c“ in GuiBuilder generated code into “nemagui_porting.h“
to change the framebuffers and screen resolution

Feel free to use any text comparison tools such as diff to see
the difference, and port all the differences into new generated code.
After that, you can compile the whole project again.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_rotating_clock/README.txt
 
Name:
=====
 nemagfx_rotating_clock


Description:
============
 NemaGFX example.

this example use two frame buffer demonstrate a digital rotating clock,
with Nema GPU support, the shader effect continue shows while timer passing
need a timer to get the accurate time past.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_rotating_crate/README.txt
 
Name:
=====
 nemagfx_rotating_crate


Description:
============
 Example of the app running nemagfx rotating_crate.

this example shows a rotating crate with texture rending support. with Nema
GPU support, it can significantly reduce the general CPU effort to calculate
the data inside the frame buffer

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_transition_effects/README.txt
 
Name:
=====
 nemagfx_transition_effects


Description:
============
 this example use one frame buffer demonstrate two picture trasition

effect, with Nema GPU support, the effect include
NEMA_TRANS_LINEAR_H,
NEMA_TRANS_CUBE_H,
NEMA_TRANS_INNERCUBE_H,
NEMA_TRANS_STACK_H,
NEMA_TRANS_LINEAR_V,
NEMA_TRANS_CUBE_V,
NEMA_TRANS_INNERCUBE_V,
NEMA_TRANS_STACK_V,
NEMA_TRANS_FADE,
NEMA_TRANS_FADE_ZOOM,
NEMA_TRANS_MAX,
NEMA_TRANS_NONE

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_tsc_fb/README.txt
 
Name:
=====
 nemagfx_tsc_fb


Description:
============
 NemaGFX example.

Nemagfx_tsc_fb is a demo of TSC frame-buffer compression. The program uses
TSC4-compressed frame-buffer during run-time. It saves frame-buffer space
in RAM in a scale of 1:4 also.The demo use example NEMADC_TSC4 frame buffer
shows a 400x400 TSC4 image on the screen, it will significantly save RAM use.
Note:  the width and height of the frame-buffer should be 4-pixels aligned

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/graphics/nemagfx_watchface/README.txt
 
Name:
=====
 nemagfx_watchface


Description:
============
 NemaGFX example.

this example uses one or two frame buffer demonstrate a digital Quartz clock, with
Nema GPU support, the shader effect continue shows while timer passing, the
function needs a timer to get the accurate time past.
AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/interfaces/mpu_mspi_ddr_octal_psram_example/README.txt
 
Name:
=====
 mpu_mspi_ddr_octal_psram_example


Description:
============
 Example of using MPU protection as workaround for DSP RAM issue.


Purpose:
========
This example demonstrates how to use MPU as workaround for DSP RAM
issue.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/interfaces/mspi_ddr_octal_psram_example/README.txt
 
Name:
=====
 mspi_ddr_octal_psram_example


Description:
============
 Example of the MSPI operation with DDR OCTAL SPI PSRAM.


Purpose:
========
This example demonstrates MSPI DDR OCTAL operation using the PSRAM
device.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/interfaces/mspi_ddr_psram_loader/README.txt
 
Name:
=====
 mspi_ddr_psram_loader


Description:
============
 Example demonstrating how to load and run binary image to MSPI external DDR PSRAM.


Purpose:
========
The binary must be linked to run from MSPI PSRAM address range
(as specified by BIN_INSTALL_ADDR). The location and size of the binary
in internal flash are specified using BIN_ADDR_FLASH & BIN_SIZE

This example has been enhanced to use the new 'binary patching' feature
This example will not build if proper startup/linker files are not used.

Additional Information:
=======================
Prepare the example as follows:
1. Generate hello_world example to load and execute at MSPI PSRAM XIP location 0x14000000.
i. In the /examples/hello_world/iar directory modify the MRAM region as follows:
define region MCU_MRAM    = mem:[from 0x00018000 to 0x00200000];
define region MCU_MRAM    = mem:[from 0x14000000 to 0x18000000];
ii. Execute "make" in the /examples/hello_world/iar directory to rebuild the project.
2. Copy /examples/hello_world/iar/bin/hello_world.bin into /boards/common4/examples/interfaces/mspi_ddr_psram_loader/
3. Create the binary with mspi_ddr_psram_loader + external executable from Step #1.
./mspi_loader_binary_combiner.py --loaderbin iar/bin/mspi_ddr_psram_loader.bin --appbin hello_world.bin --install-address 0x14000000 --flags 0x2 --outbin loader_hello_world --loader-address 0x00018000
4. Open the J-Link SWO Viewer to the target board.
5. Open the J-Flash Lite program.  Select the /examples/interfaces/mspi_ddr_psram_loader/loader_hello_world.bin file and program at 0x00018000 offset.

If Apollo4 EB board and DDR PSRAM daughter board are used, this example can work on:
Plugin DDR PSRAM daughter board to Apollo4 EB board, press SW2 button for 7 times to switch to the DDR PSRAM.



******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/interfaces/mspi_octal_example/README.txt
 
Name:
=====
 mspi_octal_example


Description:
============
 Example of the MSPI operation with Octal SPI Flash.

@{
Purpose:
========
This example configures an MSPI connected flash device in Octal DDR
mode and performs various operations - verifying the correctness of the same
Operations include - Erase, Write, Read, and XIP

Printing takes place over the ITM at 1M Baud.




******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/interfaces/mspi_octal_example_fifo_full/README.txt
 
Name:
=====
 mspi_octal_example_fifo_full


Description:
============
 Example of the MSPI operation with Octal SPI Flash.


Purpose:
========
This example demonstrates how to detect the MSPI FIFO Full
condition in an application


Printing takes place over the ITM at 1M Baud.




******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/power/coremark_pro/README.txt
 
Name:
=====
 coremark_pro


Description:
============
 EEMBC COREMARK PRO test.


Purpose:
========
This example runs the official EEMBC COREMARK PRO test.

CoreMark®-PRO is a comprehensive, advanced processor benchmark that works 
with and enhances the market-proven industry-standard EEMBC CoreMark® benchmark. 
While CoreMark stresses the CPU pipeline, CoreMark-PRO tests the entire 
processor, adding comprehensive support for multicore technology, a combination 
of integer and floating-point workloads, and data sets for utilizing larger 
memory subsystems. Together, EEMBC CoreMark and CoreMark-PRO provide a standard 
benchmark covering the spectrum from low-end microcontrollers to high-performance 
computing processors.

The EEMBC CoreMark-PRO benchmark contains five prevalent integer workloads and 
four popular floating-point workloads. 

The integer workloads include:

* JPEG compression
* ZIP compression
* XML parsing
* SHA-256 Secure Hash Algorithm
* A more memory-intensive version of the original CoreMark

The floating-point workloads include:

* Radix-2 Fast Fourier Transform (FFT)
* Gaussian elimination with partial pivoting derived from LINPACK
* A simple neural-net
* A greatly improved version of the Livermore loops benchmark using the following 24 FORTRAN 
kernels converted to C (all of these reported as a single score of the `loops.c` workload). 
The standard Livermore loops include:
*   Kernel 1 -- hydro fragment
*   Kernel 2 -- ICCG excerpt (Incomplete Cholesky Conjugate Gradient)
*   Kernel 3 -- inner product
*   Kernel 4 -- banded linear equations
*   Kernel 5 -- tri-diagonal elimination, below diagonal
*   Kernel 6 -- general linear recurrence equations
*   Kernel 7 -- equation of state fragment
*   Kernel 8 -- ADI integration
*   Kernel 9 -- integrate predictors
*   Kernel 10 -- difference predictors
*   Kernel 11 -- first sum
*   Kernel 12 -- first difference
*   Kernel 13 -- 2-D PIC (Particle In Cell)
*   Kernel 14 -- 1-D PIC (pticle In Cell)
*   Kernel 15 -- Casual Fortran.
*   Kernel 16 -- Monte Carlo search loop
*   Kernel 17 -- implicit, conditional computation
*   Kernel 18 -- 2-D explicit hydrodynamics fragment
*   Kernel 19 -- general linear recurrence equations
*   Kernel 20 -- Discrete ordinates transport, conditional recurrence on xx
*   Kernel 21 -- matrix*matrix product
*   Kernel 22 -- Planckian distribution
*   Kernel 23 -- 2-D implicit hydrodynamics fragment
*   Kernel 24 -- find location of first minimum in array

More info may be found at the [EEMBC CoreMark-PRO website](https://www.eembc.org/coremark-pro/).

The Coremark run begins by first outputing a banner (to the SWO)
indicating that it has started.

Text is output to the SWO at 1M bitrate.


******************************************************************************


 
Example ./apollo4b_evb_disp_shield/examples/usb/tinyusb_cdc_msc_emmc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example (this example needs eMMC card).


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4l_blue_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/audio/tdm_loopback/README.txt
 
Name:
=====
 tdm_loopback


Description:
============
 An example to show basic TDM operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only have 1 I2S instance, so we only do the loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_firmware_update/README.txt
 
Name:
=====
 ble_firmware_update


Description:
============
 This is the application just for updating built-in BLE firmware into Cooper.





******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_adv_ext/README.txt
 
Name:
=====
 ble_freertos_adv_ext


Description:
============
 ARM Cordio BLE - Advertising Extension Application Example.


Purpose:
========
This example implements advertising extension within the FreeRTOS
framework. To verify extended advertising working routines.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_amdtpc/README.txt
 
Name:
=====
 ble_freertos_amdtpc


Description:
============
 ARM Cordio BLE - AMDTP Client (Master) Example.


Purpose:
========
This example is the client (master) for the BLE Ambiq Micro
Data Transfer Protocol. This example is meant to run on an Apollo4 EVB
along with another Apollo4 EVB running ble_freertos_amdtps as the server.
This example provides a UART command line interface with a simple menu
that allows the user to scan, connect and initiate data transfers from
either M->S or S->M direction.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_amdtps/README.txt
 
Name:
=====
 ble_freertos_amdtps


Description:
============
 AMDTP example.





******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_amota/README.txt
 
Name:
=====
 ble_freertos_amota


Description:
============
 ARM Cordio BLE - Ambiq Micro Over the Air (AMOTA) Example.


Purpose:
========
This example implements Ambiq Micro Over-the-Air (OTA) slave.  This
example is designed to allow loading of a binary software update from either
and iOS or Android phone running Ambiq's application.  This example works
with the Apollo4 Secure Bootloader (SBL) to place the image in flash and then
reset the Apollo4 to allow SBL to validate and install the image.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.

Additional Information:
=======================
The directory \tools\apollo4_amota\scripts contains a Makefile which will
build the OTA binary.

The directory \docs\app_notes\amota explains how to use the Ambiq iOS and
Android applications.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_ancs/README.txt
 
Name:
=====
 ble_freertos_ancs


Description:
============
 ARM Cordio BLE - Apple Notification Center Service (ANCS) Example.


Purpose:
========
This example implements a BLE Apple Notification Center Service
profile.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_assettag/README.txt
 
Name:
=====
 ble_freertos_assettag


Description:
============
 ARM Cordio BLE - Asset tag Application Example.


Purpose:
========
This example implements a BLE asset tag application within the
FreeRTOS framework. This example can work as a slave connecting with
ble_freertos_locator. Then reports IQ data with AoA type to master after
receiving the CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_barebone/README.txt
 
Name:
=====
 ble_freertos_barebone


Description:
============
 Example of the ble_freertos_barebone app running under FreeRTOS.


This example implements a BLE barebone proejct within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the non-"lp" version of this example enables
them by default).  To enable debug printing, add the following project-level
macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_eatt_fit/README.txt
 
Name:
=====
 ble_freertos_eatt_fit


Description:
============
 ARM Cordio BLE - EATT Fit Application Example.


Purpose:
========
This example similar to BLE Fit example but performs the
EATT connection on PSM and CID.
implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_eatt_watch/README.txt
 
Name:
=====
 ble_freertos_eatt_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example similar to ble_freertos_watch but performs the EATT
connection on PSM and CID.
demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_eatt_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_fcc_test/README.txt
 
Name:
=====
 ble_freertos_fcc_test


Description:
============
 ARM Cordio BLE - FCC test example


Purpose:
========
This example is used to put Bluetooth radio in Apollo4 into various
test mode on different channels on pressing BTN1 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_fit/README.txt
 
Name:
=====
 ble_freertos_fit


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_locator/README.txt
 
Name:
=====
 ble_freertos_locator


Description:
============
 ARM Cordio BLE - Locator Application Example.


Purpose:
========
This example implements a BLE locater application within the FreeRTOS
framework. The locator will work as master to connect the asset tag device and
receive IQ data by sending CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.
Press button0 of Apollo4 EVB to scan/connect the asset tag device.
Press button1 of Apollo4 EVB to start CTE request after connection.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_peripheral_l2cap_coc/README.txt
 
Name:
=====
 ble_freertos_l2cap_coc


Description:
============
 ARM Cordio BLE - L2CAP CoC peripheral demo Example.


Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_throughput/README.txt
 
Name:
=====
 ble_freertos_throughput


Description:
============
 ARM Cordio BLE - Ambiq Micro Throughput Example.


Purpose:
========
This example implements is designed to test the data transmitting
and receiving thourghput. The example needs to be connected with the Ambiq BLE
Test APP (only Android now), then sends data to the APP by Notify method (Uplink)
or receives data from APP by Write Command method (Downlink) to check the rate
showed in the APP screen. The default MTU is 23 and PHY is 1M, you can request
the MTU exchange and PHY change through the settings of APP.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_txpower_ctrl/README.txt
 
Name:
=====
 ble_freertos_txpower_ctrl


Description:
============
 ARM Cordio BLE - Transmit Power Control Example


Purpose:
========
This example demonstrates the control of BLE TX power level based
on pressing Button #0 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/ble_freertos_watch/README.txt
 
Name:
=====
 ble_freertos_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/ble/uart_ble_bridge/README.txt
 
Name:
=====
 uart_ble_bridge


Description:
============
 Converts UART HCI commands to SPI.


This exapmle can be used as a way to communicate by using UART HCI between
the Apollo4 (host) and Cooper (controller).


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4l_blue_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/ble_freertos_fit_lp/README.txt
 
Name:
=====
 ble_freertos_fit_lp


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4l_blue_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4l_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4l_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4l_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4l_evb/examples/audio/tdm_loopback/README.txt
 
Name:
=====
 tdm_loopback


Description:
============
 An example to show basic TDM operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only have 1 I2S instance, so we only do the loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4l_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4l_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4l_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4l_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4l_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4l_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4l_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4l_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4l_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4l_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/audadc_power_cycling/README.txt
 
Name:
=====
 audadc_power_cycling


Description:
============
 This example tests AUADC power cycling sequence.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/audadc_rtt_stream/README.txt
 
Name:
=====
 audadc_rtt_stream


Description:
============
 This example uses AUDADC to capture and send audio data to PC via SEGGER RTT.


Purpose:
========
This example uses AUDADC INTTRIGTIMER to capture audio samples at 16 kHz
LPMODE1 is used for power efficiency
DMA is used to transfer samples from the AUDADC FIFO into an SRAM buffer

Additional Information:
=======================
Please set AUDADC_EXAMPLE_DEBUG to 1 when running in debug (rtt) mode.

@RTT Streaming: Run rtt_logger.py to capture pcm raw data via PC.
Should modify -RTTAddress in rtt_logger.py to _SEGGER_RTT address in audadc_rtt_stream.map
The data saved as stereo(L:low gain/R: high gain)

@pcm_to_wav.py:  Convert pcm raw data to wav file.
Save mono left channel to destination file.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/audio/tdm_loopback/README.txt
 
Name:
=====
 tdm_loopback


Description:
============
 An example to show basic TDM operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only have 1 I2S instance, so we only do the loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_firmware_update/README.txt
 
Name:
=====
 ble_firmware_update


Description:
============
 This is the application just for updating built-in BLE firmware into Cooper.





******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_adv_ext/README.txt
 
Name:
=====
 ble_freertos_adv_ext


Description:
============
 ARM Cordio BLE - Advertising Extension Application Example.


Purpose:
========
This example implements advertising extension within the FreeRTOS
framework. To verify extended advertising working routines.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_amdtpc/README.txt
 
Name:
=====
 ble_freertos_amdtpc


Description:
============
 ARM Cordio BLE - AMDTP Client (Master) Example.


Purpose:
========
This example is the client (master) for the BLE Ambiq Micro
Data Transfer Protocol. This example is meant to run on an Apollo4 EVB
along with another Apollo4 EVB running ble_freertos_amdtps as the server.
This example provides a UART command line interface with a simple menu
that allows the user to scan, connect and initiate data transfers from
either M->S or S->M direction.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_amdtps/README.txt
 
Name:
=====
 ble_freertos_amdtps


Description:
============
 AMDTP example.





******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_amota/README.txt
 
Name:
=====
 ble_freertos_amota


Description:
============
 ARM Cordio BLE - Ambiq Micro Over the Air (AMOTA) Example.


Purpose:
========
This example implements Ambiq Micro Over-the-Air (OTA) slave.  This
example is designed to allow loading of a binary software update from either
and iOS or Android phone running Ambiq's application.  This example works
with the Apollo4 Secure Bootloader (SBL) to place the image in flash and then
reset the Apollo4 to allow SBL to validate and install the image.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.

Additional Information:
=======================
The directory \tools\apollo4_amota\scripts contains a Makefile which will
build the OTA binary.

The directory \docs\app_notes\amota explains how to use the Ambiq iOS and
Android applications.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_ancs/README.txt
 
Name:
=====
 ble_freertos_ancs


Description:
============
 ARM Cordio BLE - Apple Notification Center Service (ANCS) Example.


Purpose:
========
This example implements a BLE Apple Notification Center Service
profile.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_assettag/README.txt
 
Name:
=====
 ble_freertos_assettag


Description:
============
 ARM Cordio BLE - Asset tag Application Example.


Purpose:
========
This example implements a BLE asset tag application within the
FreeRTOS framework. This example can work as a slave connecting with
ble_freertos_locator. Then reports IQ data with AoA type to master after
receiving the CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_barebone/README.txt
 
Name:
=====
 ble_freertos_barebone


Description:
============
 Example of the ble_freertos_barebone app running under FreeRTOS.


This example implements a BLE barebone proejct within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the non-"lp" version of this example enables
them by default).  To enable debug printing, add the following project-level
macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_eatt_fit/README.txt
 
Name:
=====
 ble_freertos_eatt_fit


Description:
============
 ARM Cordio BLE - EATT Fit Application Example.


Purpose:
========
This example similar to BLE Fit example but performs the
EATT connection on PSM and CID.
implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_eatt_watch/README.txt
 
Name:
=====
 ble_freertos_eatt_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example similar to ble_freertos_watch but performs the EATT
connection on PSM and CID.
demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_eatt_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_fcc_test/README.txt
 
Name:
=====
 ble_freertos_fcc_test


Description:
============
 ARM Cordio BLE - FCC test example


Purpose:
========
This example is used to put Bluetooth radio in Apollo4 into various
test mode on different channels on pressing BTN1 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_fit/README.txt
 
Name:
=====
 ble_freertos_fit


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_locator/README.txt
 
Name:
=====
 ble_freertos_locator


Description:
============
 ARM Cordio BLE - Locator Application Example.


Purpose:
========
This example implements a BLE locater application within the FreeRTOS
framework. The locator will work as master to connect the asset tag device and
receive IQ data by sending CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.
Press button0 of Apollo4 EVB to scan/connect the asset tag device.
Press button1 of Apollo4 EVB to start CTE request after connection.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_peripheral_l2cap_coc/README.txt
 
Name:
=====
 ble_freertos_l2cap_coc


Description:
============
 ARM Cordio BLE - L2CAP CoC peripheral demo Example.


Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_throughput/README.txt
 
Name:
=====
 ble_freertos_throughput


Description:
============
 ARM Cordio BLE - Ambiq Micro Throughput Example.


Purpose:
========
This example implements is designed to test the data transmitting
and receiving thourghput. The example needs to be connected with the Ambiq BLE
Test APP (only Android now), then sends data to the APP by Notify method (Uplink)
or receives data from APP by Write Command method (Downlink) to check the rate
showed in the APP screen. The default MTU is 23 and PHY is 1M, you can request
the MTU exchange and PHY change through the settings of APP.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_txpower_ctrl/README.txt
 
Name:
=====
 ble_freertos_txpower_ctrl


Description:
============
 ARM Cordio BLE - Transmit Power Control Example


Purpose:
========
This example demonstrates the control of BLE TX power level based
on pressing Button #0 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/ble_freertos_watch/README.txt
 
Name:
=====
 ble_freertos_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/ble/uart_ble_bridge/README.txt
 
Name:
=====
 uart_ble_bridge


Description:
============
 Converts UART HCI commands to SPI.


This exapmle can be used as a way to communicate by using UART HCI between
the Apollo4 (host) and Cooper (controller).


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/ble_freertos_fit_lp/README.txt
 
Name:
=====
 ble_freertos_fit_lp


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/tempco/README.txt
 
Name:
=====
 tempco


Description:
============
 A brief demonstration of the Temperature Compensation feature.


This example initializes and invokes the TempCo feature.


******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/usb/tinyusb_cdc/README.txt
 
Name:
=====
 tinyusb_cdc


Description:
============
 tinyusb cdc-acm example.


This example demonstrates how to use the USB CDC-ACM device class. it will
echo back the the input from the terminal tool.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/usb/tinyusb_cdc_dual_ports/README.txt
 
Name:
=====
 tinyusb_cdc_dual_ports


Description:
============
 tinyusb two cdc-acm composite USB example.


This example demonstrates how to add two USB CDC-ACM COM ports. it will echo
back the the input from one terminal and copy the input to another terminal
at the same time.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/usb/tinyusb_cdc_msc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/usb/tinyusb_cdc_msc_freertos/README.txt
 
Name:
=====
 tinyusb_cdc_msc_freertos


Description:
============
 tinyusb cdc-acm and mass storage FreeRTOS USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux. The CDC-ACM and Mass storage
functions will be handled by two separate FreeRTOS tasks.




******************************************************************************


 
Example ./apollo4p_blue_kbr_evb/examples/usb/tinyusb_hid_generic/README.txt
 
Name:
=====
 tinyusb_hid_generic


Description:
============
 tinyusb hid example.


This example demonstrates the USB generic HID function, it will echo back the
the report from HID OUT endpoint to USB host via HID IN endpoint.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/audadc_power_cycling/README.txt
 
Name:
=====
 audadc_power_cycling


Description:
============
 This example tests AUADC power cycling sequence.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/audadc_rtt_stream/README.txt
 
Name:
=====
 audadc_rtt_stream


Description:
============
 This example uses AUDADC to capture and send audio data to PC via SEGGER RTT.


Purpose:
========
This example uses AUDADC INTTRIGTIMER to capture audio samples at 16 kHz
LPMODE1 is used for power efficiency
DMA is used to transfer samples from the AUDADC FIFO into an SRAM buffer

Additional Information:
=======================
Please set AUDADC_EXAMPLE_DEBUG to 1 when running in debug (rtt) mode.

@RTT Streaming: Run rtt_logger.py to capture pcm raw data via PC.
Should modify -RTTAddress in rtt_logger.py to _SEGGER_RTT address in audadc_rtt_stream.map
The data saved as stereo(L:low gain/R: high gain)

@pcm_to_wav.py:  Convert pcm raw data to wav file.
Save mono left channel to destination file.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/audio/tdm_loopback/README.txt
 
Name:
=====
 tdm_loopback


Description:
============
 An example to show basic TDM operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only have 1 I2S instance, so we only do the loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_firmware_update/README.txt
 
Name:
=====
 ble_firmware_update


Description:
============
 This is the application just for updating built-in BLE firmware into Cooper.





******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_adv_ext/README.txt
 
Name:
=====
 ble_freertos_adv_ext


Description:
============
 ARM Cordio BLE - Advertising Extension Application Example.


Purpose:
========
This example implements advertising extension within the FreeRTOS
framework. To verify extended advertising working routines.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_amdtpc/README.txt
 
Name:
=====
 ble_freertos_amdtpc


Description:
============
 ARM Cordio BLE - AMDTP Client (Master) Example.


Purpose:
========
This example is the client (master) for the BLE Ambiq Micro
Data Transfer Protocol. This example is meant to run on an Apollo4 EVB
along with another Apollo4 EVB running ble_freertos_amdtps as the server.
This example provides a UART command line interface with a simple menu
that allows the user to scan, connect and initiate data transfers from
either M->S or S->M direction.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_amdtps/README.txt
 
Name:
=====
 ble_freertos_amdtps


Description:
============
 AMDTP example.





******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_amota/README.txt
 
Name:
=====
 ble_freertos_amota


Description:
============
 ARM Cordio BLE - Ambiq Micro Over the Air (AMOTA) Example.


Purpose:
========
This example implements Ambiq Micro Over-the-Air (OTA) slave.  This
example is designed to allow loading of a binary software update from either
and iOS or Android phone running Ambiq's application.  This example works
with the Apollo4 Secure Bootloader (SBL) to place the image in flash and then
reset the Apollo4 to allow SBL to validate and install the image.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.

Additional Information:
=======================
The directory \tools\apollo4_amota\scripts contains a Makefile which will
build the OTA binary.

The directory \docs\app_notes\amota explains how to use the Ambiq iOS and
Android applications.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_ancs/README.txt
 
Name:
=====
 ble_freertos_ancs


Description:
============
 ARM Cordio BLE - Apple Notification Center Service (ANCS) Example.


Purpose:
========
This example implements a BLE Apple Notification Center Service
profile.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_assettag/README.txt
 
Name:
=====
 ble_freertos_assettag


Description:
============
 ARM Cordio BLE - Asset tag Application Example.


Purpose:
========
This example implements a BLE asset tag application within the
FreeRTOS framework. This example can work as a slave connecting with
ble_freertos_locator. Then reports IQ data with AoA type to master after
receiving the CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_barebone/README.txt
 
Name:
=====
 ble_freertos_barebone


Description:
============
 Example of the ble_freertos_barebone app running under FreeRTOS.


This example implements a BLE barebone proejct within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the non-"lp" version of this example enables
them by default).  To enable debug printing, add the following project-level
macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_eatt_fit/README.txt
 
Name:
=====
 ble_freertos_eatt_fit


Description:
============
 ARM Cordio BLE - EATT Fit Application Example.


Purpose:
========
This example similar to BLE Fit example but performs the
EATT connection on PSM and CID.
implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_eatt_watch/README.txt
 
Name:
=====
 ble_freertos_eatt_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example similar to ble_freertos_watch but performs the EATT
connection on PSM and CID.
demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_eatt_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_fcc_test/README.txt
 
Name:
=====
 ble_freertos_fcc_test


Description:
============
 ARM Cordio BLE - FCC test example


Purpose:
========
This example is used to put Bluetooth radio in Apollo4 into various
test mode on different channels on pressing BTN1 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_fit/README.txt
 
Name:
=====
 ble_freertos_fit


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_locator/README.txt
 
Name:
=====
 ble_freertos_locator


Description:
============
 ARM Cordio BLE - Locator Application Example.


Purpose:
========
This example implements a BLE locater application within the FreeRTOS
framework. The locator will work as master to connect the asset tag device and
receive IQ data by sending CTE request.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.
Press button0 of Apollo4 EVB to scan/connect the asset tag device.
Press button1 of Apollo4 EVB to start CTE request after connection.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_peripheral_l2cap_coc/README.txt
 
Name:
=====
 ble_freertos_l2cap_coc


Description:
============
 ARM Cordio BLE - L2CAP CoC peripheral demo Example.


Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_throughput/README.txt
 
Name:
=====
 ble_freertos_throughput


Description:
============
 ARM Cordio BLE - Ambiq Micro Throughput Example.


Purpose:
========
This example implements is designed to test the data transmitting
and receiving thourghput. The example needs to be connected with the Ambiq BLE
Test APP (only Android now), then sends data to the APP by Notify method (Uplink)
or receives data from APP by Write Command method (Downlink) to check the rate
showed in the APP screen. The default MTU is 23 and PHY is 1M, you can request
the MTU exchange and PHY change through the settings of APP.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

If enabled, debug messages will be sent over ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_txpower_ctrl/README.txt
 
Name:
=====
 ble_freertos_txpower_ctrl


Description:
============
 ARM Cordio BLE - Transmit Power Control Example


Purpose:
========
This example demonstrates the control of BLE TX power level based
on pressing Button #0 on the Apollo4 EVB.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/ble_freertos_watch/README.txt
 
Name:
=====
 ble_freertos_watch


Description:
============
 ARM Cordio BLE - Concurrent Master/Slave Example.


Purpose:
========
This example demonstrates an BLE application in the Central role.
That is the BLE application operates as a slave to phone master and as the
master of subordinate slave devices running freertos_fit example in this SDK.

Additional Information:
=======================
1. Printing takes place over the ITM at 1M Baud.
2. When the example powers up,
2.A. it enters advertising mode by default to wait for connection from
smart phone with Time profile, Alert Notification profile and Phone
Alert Status profile supported.
2.B. when BTN1 on Apollo4 EVB is short-pressed, if advertising is on, it
stops advertising first and then starts scanning when advertising is
stopped; if scanning is on, it stops scanning and re-start advertising
when scanning stops.
2.C. During scanning, the device (if discovered) running freertos_fit
example in this SDK will be connected and scanning will be stopped.
2.D. Repeat 2.B. and 2.C. above to connect to a new slave device running
freertos_fit example (max slaves is 3).
3. when phone (iPhone is used) connects to this example, the services of Time
profile, Alert Notification profile and Phone Alert Status profile will be
subscribed by the example.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/ble/uart_ble_bridge/README.txt
 
Name:
=====
 uart_ble_bridge


Description:
============
 Converts UART HCI commands to SPI.


This exapmle can be used as a way to communicate by using UART HCI between
the Apollo4 (host) and Cooper (controller).


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/ble_freertos_fit_lp/README.txt
 
Name:
=====
 ble_freertos_fit_lp


Description:
============
 ARM Cordio BLE - Fit Application Example.


Purpose:
========
This example implements a BLE heart rate sensor within the FreeRTOS
framework. To minimize power usage, this application is compiled without
debug printing by default (the "lp" version of this example excludes
them by default).

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF
WSF_TRACE_ENABLED=1

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/tempco/README.txt
 
Name:
=====
 tempco


Description:
============
 A brief demonstration of the Temperature Compensation feature.


This example initializes and invokes the TempCo feature.


******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/usb/tinyusb_cdc/README.txt
 
Name:
=====
 tinyusb_cdc


Description:
============
 tinyusb cdc-acm example.


This example demonstrates how to use the USB CDC-ACM device class. it will
echo back the the input from the terminal tool.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/usb/tinyusb_cdc_dual_ports/README.txt
 
Name:
=====
 tinyusb_cdc_dual_ports


Description:
============
 tinyusb two cdc-acm composite USB example.


This example demonstrates how to add two USB CDC-ACM COM ports. it will echo
back the the input from one terminal and copy the input to another terminal
at the same time.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/usb/tinyusb_cdc_msc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/usb/tinyusb_cdc_msc_freertos/README.txt
 
Name:
=====
 tinyusb_cdc_msc_freertos


Description:
============
 tinyusb cdc-acm and mass storage FreeRTOS USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux. The CDC-ACM and Mass storage
functions will be handled by two separate FreeRTOS tasks.




******************************************************************************


 
Example ./apollo4p_blue_kxr_evb/examples/usb/tinyusb_hid_generic/README.txt
 
Name:
=====
 tinyusb_hid_generic


Description:
============
 tinyusb hid example.


This example demonstrates the USB generic HID function, it will echo back the
the report from HID OUT endpoint to USB host via HID IN endpoint.




******************************************************************************


 
Example ./apollo4p_evb/examples/audio/audadc_power_cycling/README.txt
 
Name:
=====
 audadc_power_cycling


Description:
============
 This example tests AUADC power cycling sequence.



******************************************************************************


 
Example ./apollo4p_evb/examples/audio/audadc_rtt_stream/README.txt
 
Name:
=====
 audadc_rtt_stream


Description:
============
 This example uses AUDADC to capture and send audio data to PC via SEGGER RTT.


Purpose:
========
This example uses AUDADC INTTRIGTIMER to capture audio samples at 16 kHz
LPMODE1 is used for power efficiency
DMA is used to transfer samples from the AUDADC FIFO into an SRAM buffer

Additional Information:
=======================
Please set AUDADC_EXAMPLE_DEBUG to 1 when running in debug (rtt) mode.

@RTT Streaming: Run rtt_logger.py to capture pcm raw data via PC.
Should modify -RTTAddress in rtt_logger.py to _SEGGER_RTT address in audadc_rtt_stream.map
The data saved as stereo(L:low gain/R: high gain)

@pcm_to_wav.py:  Convert pcm raw data to wav file.
Save mono left channel to destination file.



******************************************************************************


 
Example ./apollo4p_evb/examples/audio/i2s_loopback/README.txt
 
Name:
=====
 i2s_loopback


Description:
============
 An example to show basic I2S operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only has 1 I2S instance, so we only loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the SWO at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/audio/pdm_fft/README.txt
 
Name:
=====
 pdm_fft


Description:
============
 An example to show basic PDM operation.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.

GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_evb/examples/audio/pdm_rtt_stream/README.txt
 
Name:
=====
 pdm_rtt_stream


Description:
============
 An example to show PDM audio streaming to PC over RTT data logger.


Purpose:
========
This example enables the PDM interface to record audio signals from an
external microphone. The required pin connections are:

Printing takes place over the ITM at 1M Baud.
RTT logger takes place over the SWD at 4M Baud.

Usage:
======
Build and download the program into the target device.
Reset the target and check the SWO print for PDM settings.
Run the helper script 'rtt_logger.py' in the project folder

python3 rtt_logger.py

(In this example, RTT control block is mapped to a fixed address to facilitate
the searching process. If the address is changed, make sure to modify
the rtt_logger.py script to match the address.)

During data streaming, press any key to stop the recording.
The audio captured is stored into the same folder as the rtt_logger.py,
with a file name of yyyymmdd-hh-mm-ss.pcm.

To check the audio, load the *.pcm file into audio analysis tools and check.
E.g. in Audacity, https://www.audacityteam.org/:
File -> Import -> Raw data...
Default import format is:
Signed 24-bit PCM
Little-endian
2 Channels (Stereo)
Start offset: 0 bytes
Amount to import: 100%
Sample rate: 16000 Hz


GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

On Apollo4l, there is only 1 PDM instance (PDM0).


******************************************************************************


 
Example ./apollo4p_evb/examples/audio/pdm_to_i2s/README.txt
 
Name:
=====
 pdm_to_i2s


Description:
============
 An example to show PDM to I2S(slave) operation.


Purpose:
========
This example enables the PDM and I2S interface to collect audio signals from
an external PDM microphone, I2S module using pingpong buffer to interact with PDM,
and start transaction when mclk is supplied(from external I2S master).
Notice: external mclk should be supplied first at this example.

The required pin connections are:
- PDM0 -
GPIO 50 - PDM0 CLK
GPIO 51 - PDM0 DATA

- PDM1 -
GPIO 52 - PDM1 CLK
GPIO 53 - PDM1 DATA

- PDM2 -
GPIO 54 - PDM2 CLK
GPIO 55 - PDM2 DATA

- PDM3 -
GPIO 56 - PDM3 CLK
GPIO 57 - PDM3 DATA

Printing takes place over the ITM at 1M Baud.


On Apollo4l, there is only 1 PDM instance (PDM0) and only 1 I2S instance (I2S0).


******************************************************************************


 
Example ./apollo4p_evb/examples/audio/tdm_loopback/README.txt
 
Name:
=====
 tdm_loopback


Description:
============
 An example to show basic TDM operation.


Purpose:
========
This example enables the I2S interfaces to loop back data from
each other. Either I2S0 or I2S1 can be selected as the master.
NOTE: 1.Use embedded pingpong machine
step 1: prepare 2 blocks of buffer
sTransfer0.ui32RxTargetAddr = addr1;
sTransfer0.ui32RxTargetAddrReverse = addr2;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_interrupt_service to restart DMA operation, the handler help automatically switch to reverse buffer
am_dspi2s0_isr()
{
am_hal_i2s_interrupt_service(pI2S0Handle, ui32Status, &g_sI2S0Config);
}
step 3: fetch the ready data
am_hal_i2s_dma_get_buffer
2.Use new DMA-able buffer
step 1: prepare 1 block of buffer
sTransfer0.ui32RxTargetAddr = addr1;
am_hal_i2s_dma_configure(pI2S0Handle, &g_sI2S0Config, &sTransfer0);
step 2: call am_hal_i2s_dma_transfer_continue to restart DMA operation with new allocated buffer
am_dspi2s0_isr()
{
am_hal_i2s_dma_transfer_continue
}

The required pin connections are as follows.
GPIO16 I2S1CLK  to GPIO11 I2S0CLK
GPIO18 I2S1WS   to GPIO13 I2S0WS
GPIO17 I2S1DOUT to GPIO14 I2S0DIN
GPIO19 I2S1DIN  to GPIO12 I2S0DOUT

Apollo4L only have 1 I2S instance, so we only do the loopback between I2S0 TX and RX.

The required pin connections are as follows.
GPIO48 I2S0DOUT to GPIO14 I2S0DIN

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/crypto/apollo4_sec_bl/README.txt
 
Name:
=====
 apollo4_secbl


Description:
============
 A simple secondary bootloader program example template for Apollo4


Purpose:
========
This program is an example template for a secondary bootloader program for Apollo4.
It demonstrates how to access OTP key area.\n
It demonstrates how to use the Ambiq SBL OTA
framework for customer specific OTAs, e.g. to support external psram, or to support more
advanced auth/enc schemes.
<br>It demonstrates how to validate & transfer control to the real
main program image (assumed to be at address specified by MAIN_PROGRAM_ADDR_IN_FLASH in mram)
after locking the OTP area before exiting<br><br>

This example only demonstrates nonsecure boot and nonsecure OTA.\n\n

Printing takes place over the ITM at 1M Baud.<br><br>

Additional Information:
=======================
To exercise this program:\n
Flash the main program at 0x100000 (MAIN_PROGRAM_ADDR_IN_FLASH)\n
Link this program at the address suitable for SBL(0x18000) configuration\n
To test OTA - construct images using magic numbers in the range matching AM_IMAGE_MAGIC_CUST\n
To test OTP key area access - need to keep OTP->Security->PLONEXIT as 1\n\n
Memory Addresses Used:\n
======<\n

|   Address   | Description                                                                                                                |\n
|:-----------:|:---------------------------------------------------------------------------------------------------------------------------|\n
| 0x0001,8000 | Location of Sbl (unsecure secondary bootloader) at the standard apollo4 flash address.                                     |\n
| 0x000D,2000 | Location where jlink script will load the unencrypted image blob that contains header info and the hello world application |\n
| 0x0010,0000 | Location where sbl will move the executable portion of the hello_world from 0x000D,2000 + headerSize.                      |\n
| 0x000D,0000 | Location where ota pointers are loaded (by jlink script), this is where the the sbl will find pointers to the blob         |\n
| 0x4002,0264 | Address of OTA register, this is loaded by the jlink script and will point to 0x000D,0000. Used in SBL                     |\n\n

To Start:\n\n

Generate a hello world using a modified IAR linker script. Make sure the flash region (MCU_MRAM) starts at 0x00100000 as follows:\n

@code
Define regions for the various types of internal memory.

define region MCU_MRAM    = mem:[from 0x00100000 to 0x00200000];
define region MCU_TCM     = mem:[from 0x10000000 to 0x10060000];
define region SHARED_SRAM = mem:[from 0x10060000 to 0x10160000];
@endcode

Name the hello_world binary something descriptive, say hello_world_100000.bin<\n

It is easiest to just copy this over to the <em>tools/apollo4b_scripts</em> directory and work from there\n\n

Use one of the example blob creators found in <em>tools/apollo4b_scripts/examples</em>.\n
The output created by examples/firmware, examples/wired_download, or examples/wired_ota should all work\n
For example use <em>examples/firmware</em>,\n

\n
1 Copy the hello_world_bin into the examples/wired_download directory\n
2 edit/check these lines in firmware.ini:\n
- app_file = hello_world_1000000\n
- load_address = 0x100000\n
3 in a bash-shel type make, look at the Makefile for detail\n
4 Now there will be a file: hello_world_100000.ota.\n
- rename this to hello_world_100000.ota.bin, the jlink download command really wants a bin file\n
5 copy this back two levels to the tools directory\n
6 at this point you should already have the apollo4_sec_bl.bin file loaded at 0x18000\n
7 don't have any debugger running\n
8 open up an swo window to see what is happening\n
9 open a cmd window and using the jlink-blob.jlink file below type jlink --CommanderScript jlink-blob.jlink\n
10 this should restart the secondary bootloader, and you should see the sbl process the blob via debug output (SWO).\n
11 Note: now since the image is resident in the MRAM, the secondary bootloader normally will jump to the hello world image.\n
12 Note: to do a full test of the download capability, the resident image at 0x00100000 should be erased before testing\n
13 Note: (depending on your setup, you may have to type python3 instead of python)\n
14 Note: All the scripts were run using python 3.8.10. They didn't work with python 3.9.\n


******************************************************************************


 
Example ./apollo4p_evb/examples/crypto/rng_test/README.txt
 
Name:
=====
 rng_test


Description:
============
 A simple example to demonstrate use of the mbedtls RNG.


This example initialized the mbedTLS crypto library and uses it to produce a
stream of random numbers.


******************************************************************************


 
Example ./apollo4p_evb/examples/crypto/rsa_sign_verify/README.txt
 
Name:
=====
 rsa_sign_verify


Description:
============
 A simple example to demonstrate using runtime crypto APIs.


This example initializes the runtime crypto lib at the beginning.
Later it invokes crypto and use it to do SHA and RSA.
If ENABLE_CRYPTO_ON_OFF is defined, it also controls Crypto power and keeps
it active only while in use.


******************************************************************************


 
Example ./apollo4p_evb/examples/interfaces/ios_fifo/README.txt
 
Name:
=====
 ios_fifo


Description:
============
 Example slave used for demonstrating the use of the IOS FIFO.


Purpose:
========
This slave component runs on one EVB and is used in conjunction with
the companion host example, ios_fifo_host, which runs on a second EVB.

The ios_fifo example has no print output.
The host example does use the ITM SWO to let the user know progress and
status of the demonstration.

This example implements the slave part of a protocol for data exchange with
an Apollo IO Master (IOM).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgment to IOS once it has finished reading a block
of data initiated by IOS (partially or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
In order to run this example, a host device (e.g. a second EVB) must be set
up to run the host example, ios_fifo_host.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_evb/examples/interfaces/ios_fifo_host/README.txt
 
Name:
=====
 ios_fifo_host


Description:
============
 Example host used for demonstrating the use of the IOS FIFO.


Purpose:
========
This host component runs on one EVB and is used in conjunction with
the companion slave example, ios_fifo, which runs on a second EVB.

The host example uses the ITM SWO to let the user know progress and
status of the demonstration.  The SWO is configured at 1M baud.
The ios_fifo example has no print output.

This example implements the host part of a protocol for data exchange with
an Apollo IO Slave (IOS).  The host sends one byte commands on SPI/I2C by
writing to offset 0x80.

The command is issued by the host to Start/Stop Data accumulation, and also
to acknowledge read-complete of a block of data.

On the IOS side, once it is asked to start accumulating data (using START
command), two CTimer based events emulate sensors sending data to IOS.
When IOS has some data for host, it implements a state machine,
synchronizing with the host.

The IOS interrupts the host to indicate data availability. The host then
reads the available data (as indicated by FIFOCTR) by READing using IOS FIFO
(at address 0x7F).  The IOS keeps accumulating any new data coming in the
background.

Host sends an acknowledgement to IOS once it has finished reading a block
of data initiated by IOS (partitally or complete). IOS interrupts the host
again if and when it has more data for the host to read, and the cycle
repeats - till host indicates that it is no longer interested in receiving
data by sending STOP command.

Additional Information:
=======================
In order to run this example, a slave device (e.g. a second EVB) must be set
up to run the companion example, ios_fifo.  The two boards can be connected
using fly leads between the two boards as follows.

Pin connections for the I/O Master board to the I/O Slave board.

Apollo4 Lite and Blue Lite EVBs

SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[48] IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[49] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[73] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[12] GPIO Interrupt (slave to host) GPIO[12] GPIO interrupt
GPIO[47] IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[48] IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND

Apollo4 / Blue and Apollo4 Plus / Blue Plus EVBs
SPI:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 SPI SCK                   GPIO[0]  IOS SPI SCK
GPIO[9]  IOM1 SPI MOSI                  GPIO[1]  IOS SPI MOSI
GPIO[10] IOM1 SPI MISO                  GPIO[2]  IOS SPI MISO
GPIO[11] IOM1 SPI nCE                   GPIO[3]  IOS SPI nCE
GND                                     GND

I2C:
HOST (ios_fifo_host)                    SLAVE (ios_fifo)
--------------------                    ----------------
GPIO[4] GPIO Interrupt (slave to host)  GPIO[4]  GPIO interrupt
GPIO[12] for KXR parts
GPIO[8]  IOM1 I2C SCL                   GPIO[0]  IOS I2C SCL
GPIO[9]  IOM1 I2C SDA                   GPIO[1]  IOS I2C SDA
GND                                     GND


******************************************************************************


 
Example ./apollo4p_evb/examples/memory/info_dump/README.txt
 
Name:
=====
 info_dump


Description:
============
 A simple program to dump the INFOspace to SWO




******************************************************************************


 
Example ./apollo4p_evb/examples/memory/mram_program/README.txt
 
Name:
=====
 mram_program


Description:
============
 MRAM programming example.


Purpose:
========
This example shows how to modify the internal MRAM using HAL
MRAM helper functions.

This example works on the portion of the MRAM at the 1MB boundary.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/adc_lpmode0_dma/README.txt
 
Name:
=====
 adc_lpmode0_dma


Description:
============
 This example takes samples with the ADC at high-speed using DMA.


Purpose:
========
This example shows the CTIMER-A3 triggering repeated samples of an external
input at 1.2Msps in LPMODE0.  The example uses the CTIMER-A3 to trigger
ADC sampling.  Each data point is 128 sample average and is transferred
from the ADC FIFO into an SRAM buffer using DMA.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/adc_measure/README.txt
 

Name:
=====
 adc_measure


Description:
============
 Example of ADC sampling the voltage applied to a particular pin.


Purpose:
========
This example initializes the ADC and periodically samples the
voltage as applied to the ADC input configured on pin 18.

On interrupt, the samples are pulled from the FIFO, the example then
applies Vref to the sample and displays the measured voltage to SWO.

It should be noted that he pin number used for input is designated in the
example source code via the define ADC_INPUT_PIN.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/adc_vbatt/README.txt
 
Name:
=====
 adc_vbatt


Description:
============
 Example of ADC sampling VBATT voltage divider, BATT load, and temperature.


Purpose:
========
This example initializes the ADC. About two times per second it reads
the VBATT voltage divider and temperature sensor and prints the results.

It also monitors button 0 and if pressed, toggles between enabling and
disabling the BATTLOAD resistor.
One would want to monitor MCU current to see when the load is on or off.

The expected VBATT voltage as measured for the Apollo4 EVB is ~0.65V.
In general the measured voltage should be VDD / 3.

Printing takes place over the SWO at 1M Baud.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/binary_counter/README.txt
 
Name:
=====
 binary_counter


Description:
============
 Example that displays the timer count on the LEDs.


Purpose:
========
This example increments a variable on every timer interrupt. The global
variable is used to set the state of the LEDs. The example sleeps otherwise.

Printing takes place over the SWO/ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/clkout/README.txt
 
Name:
=====
 clkout


Description:
============
 A simple demonstration of the Apollo4 CLKOUT feature.


This example enables CLKOUT, configures a pin to output the CLKOUT signal
and sets up a GPIO interrupt to count the number of low-to-high transitions
of CLKOUT. The transitions are counted in the ISR in order to toggle an LED
about once per second.

A logic analyzer can be attached to the pin specified by CLKOUT_PIN to
observe the CLKOUT signal.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/hello_world/README.txt
 
Name:
=====
 hello_world


Description:
============
 A simple "Hello World" example.


This example prints a "Hello World" message with some device info
over SWO at 1M baud. To see the output of this program, use J-Link
SWO Viewer (or similar viewer appl) and configure SWOClock for 1000.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/hello_world_uart/README.txt
 
Name:
=====
 hello_world_uart


Description:
============
 A simple "Hello World" example using the UART peripheral.


This example prints a "Hello World" message with some device info
over UART at 115200 baud.
To see the output of this program, run a terminal appl such as
Tera Term or PuTTY, and configure the console for UART.
The example sleeps after it is done printing.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/hp_mode_192mhz/README.txt
 
Name:
=====
 hp_mode_192mhz


Description:
============
 Example demonstrates the usage of High Performance Mode(192MHz) HAL.


Purpose:
========
This example sets the Apollo4 into High Power Mode(192MHz), then
times a calculation of prime numbers, displaying the elapsed time.
Next, it switches the Apollo4 into Low Performance Mode(96MHz), performs
the same calculation, then displays the elapsed time, which should be
roughly double the time of Low Power Mode.

The entire test takes around 30s to run on Apollo4.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/rtc_print/README.txt
 
Name:
=====
 rtc_print


Description:
============
 Example using the internal RTC.


This example demonstrates how to interface with the RTC and prints the
time over SWO.

The example works by configuring a timer interrupt which will periodically
wake the core from deep sleep. After every interrupt, it prints the current
RTC time.



******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/stimer/README.txt
 
Name:
=====
 stimer


Description:
============
 Example using a stimer with interrupts.


Purpose:
========
This example demonstrates how to setup the stimer for counting and
interrupts. It toggles LED 0 to 4 every interrupt, which is set for 1 sec.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/systick_int/README.txt
 
Name:
=====
 systick_int


Description:
============
 A simple example of using the SysTick interrupt.


This example is a simple demonstration of the use of the SysTick interrupt.

If the test board has LEDs (as defined in the BSP), the example will
blink the board's LED0 every 1/2 second.
If the test board does not have LEDs, a GPIO is toggled every 1/2 second.

Since the clock to the core is gated during sleep, whether deep sleep or
normal sleep, the SysTick interrupt cannot be used to wake the device.


******************************************************************************


 
Example ./apollo4p_evb/examples/peripherals/watchdog/README.txt
 
Name:
=====
 watchdog


Description:
============
 Example of a basic configuration of the watchdog.


Purpose:
========
This example shows a simple configuration of the watchdog. It will print
a banner message, configure the watchdog for both interrupt and reset
generation, and immediately start the watchdog timer.
The watchdog ISR provided will 'pet' the watchdog four times, printing
a notification message from the ISR each time.
On the fifth interrupt, the watchdog will not be pet, so the 'reset'
action will eventually be allowed to occur.
On the sixth timeout event, the WDT should issue a system reset, and the
program should start over from the beginning.

Printing takes place over the ITM at 1M Baud.



******************************************************************************


 
Example ./apollo4p_evb/examples/power/coremark/README.txt
 
Name:
=====
 coremark


Description:
============
 EEMBC COREMARK test.


Purpose:
========
This example runs the official EEMBC COREMARK test.

The Coremark run begins by first outputing a banner (to the UART)
indicating that it has started.  It then does a complete disable
and power down of the UART for accurate power measuring during the run.

The Coremkark implementation performs 2000 ITERATIONS (specified in
ambiq_core_config.h), which is plenty of time for correct operation
of the benchmark.

Once the run has completed, the UART is reenabled and the results printed.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_evb/examples/power/deepsleep/README.txt
 
Name:
=====
 deepsleep


Description:
============
 Example demonstrating how to enter deepsleep.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
sleep mode the device has no ability to wake up. This example is merely to
provide the opportunity to measure deepsleep current without interrupts
interfering with the measurement.

The example begins by printing out a banner announcement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_evb/examples/power/deepsleep_wake/README.txt
 
Name:
=====
 deepsleep_wake


Description:
============
 Example that goes to deepsleep and wakes from either the RTC or GPIO.


Purpose:
========
This example configures the device to go into a deep sleep mode. Once in
deep sleep the RTC peripheral will wake the device every second, check to
see if 5 seconds has elapsed and then toggle LED1.

Alternatively, it will awake when button 0 is pressed and toggle LED0.

The example begins by printing out a banner annoucement message through
the UART, which is then completely disabled for the remainder of execution.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.


******************************************************************************


 
Example ./apollo4p_evb/examples/power/prime/README.txt
 
Name:
=====
 prime


Description:
============
 This example computes the number of primes in a given integer value.


Purpose:
========
This example consists of a non-optimized, brute-force routine for computing
the number of prime numbers between 1 and a given value, N. The routine
uses modulo operations to determine whether a value is prime or not. While
obviously not optimal, it is very useful for exercising the core.

For this example, N is 1000000, for which the answer is 78498.

Additional Information:
=======================
The goal of this example is to measure current consumption while the core
is working to compute the answer. Power and energy can then be derived
knowing the current and run time.

The example prints an initial banner to the UART port.  After each prime
loop, it enables the UART long enough to print the answer, disables the
UART and starts the computation again.

Text is output to the UART at 115,200 BAUD, 8 bit, no parity.
Please note that text end-of-line is a newline (LF) character only.
Therefore, the UART terminal must be set to simulate a CR/LF.

Note: For minimum power, disable the printing by setting PRINT_UART to 0.



******************************************************************************


 
Example ./apollo4p_evb/examples/power/tempco/README.txt
 
Name:
=====
 tempco


Description:
============
 A brief demonstration of the Temperature Compensation feature.


This example initializes and invokes the TempCo feature.


******************************************************************************


 
Example ./apollo4p_evb/examples/power/while/README.txt
 
Name:
=====
 while


Description:
============
 Example to emulate a polling loop.


Purpose:
========
This example provides a demonstration of the power required while
executing in a tight loop on the Apollo4 MCU.




******************************************************************************


 
Example ./apollo4p_evb/examples/usb/tinyusb_cdc/README.txt
 
Name:
=====
 tinyusb_cdc


Description:
============
 tinyusb cdc-acm example.


This example demonstrates how to use the USB CDC-ACM device class. it will
echo back the the input from the terminal tool.




******************************************************************************


 
Example ./apollo4p_evb/examples/usb/tinyusb_cdc_dual_ports/README.txt
 
Name:
=====
 tinyusb_cdc_dual_ports


Description:
============
 tinyusb two cdc-acm composite USB example.


This example demonstrates how to add two USB CDC-ACM COM ports. it will echo
back the the input from one terminal and copy the input to another terminal
at the same time.




******************************************************************************


 
Example ./apollo4p_evb/examples/usb/tinyusb_cdc_msc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
Example ./apollo4p_evb/examples/usb/tinyusb_cdc_msc_freertos/README.txt
 
Name:
=====
 tinyusb_cdc_msc_freertos


Description:
============
 tinyusb cdc-acm and mass storage FreeRTOS USB example.


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux. The CDC-ACM and Mass storage
functions will be handled by two separate FreeRTOS tasks.




******************************************************************************


 
Example ./apollo4p_evb/examples/usb/tinyusb_hid_generic/README.txt
 
Name:
=====
 tinyusb_hid_generic


Description:
============
 tinyusb hid example.


This example demonstrates the USB generic HID function, it will echo back the
the report from HID OUT endpoint to USB host via HID IN endpoint.




******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/bm_sdmmc_sdio/emmc_bm_fatfs/README.txt
 
Name:
=====
 emmc_bm_fatfs


Description:
============
 eMMC bare-metal FatFs example.


Purpose:
========
This example demonstrates how to use file system with eMMC device
based on the eMMC bare-metal HAL.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/bm_sdmmc_sdio/emmc_bm_rpmb/README.txt
 
Name:
=====
 emmc_bm_rpmb


Description:
============
 emmc rpmb example.


Purpose:
========
This example demonstrates how to use APIs in eMMC RPMB driver
to access RPMB partition.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/bm_sdmmc_sdio/emmc_raw_block_read_write/README.txt
 
Name:
=====
 emmc_raw_block_read_write


Description:
============
 emmc raw block read and write example.


Purpose:
========
This example demonstrates how to blocking PIO and DMA read & write
APIs with eMMC device.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/dbi2dsi_test/README.txt
 
Name:
=====
 dbi2dsi_test


Description:
============
 DSI example.


This example demonstrates how to drive a MIPI DSI panel.

1-lane DSI includes 4 signals,
* Differential clock lane - positive (CLKP)
* Differential clock lane - negative (CLKN)
* Differential data lane 0 - positive (D0P)
* Differential data lane 0 - negative (D0N).



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/dsi_power_test/README.txt
 
Name:
=====
 dsi_power_test


Description:
============
 DSI example.


This example demonstrates DSI power saving sequence.



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/dsi_rw_command/README.txt
 
Name:
=====
 dsi_rw_command


Description:
============
 DSI example.


This example demonstrates how to read and write RM67162 display registers with DSI.

1-lane DSI includes 4 signals,
* Differential clock lane - positive (CLKP)
* Differential clock lane - negative (CLKN)
* Differential data lane 0 - positive (D0P)
* Differential data lane 0 - negative (D0N).



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemadc_4layer/README.txt
 
Name:
=====
 nemadc_4layer


Description:
============
 NemaDC example.


This example demonstrates DC 4 layers overlay with global alpha blending.
* Layer0 - Red image
* Layer1 - Green image
* Layer2 - Blue image
* Layer3 - Yellow image
Global alpha value can be changed in layer*.alpha. Blendmode can be changed
in layer*.blendmode.

This example can work at two different SPI interfaces. When defined ENABLE_SPI4
in preprocessor defined symbols, this example drives panel through SPI4 interface.
When defined ENABLE_QSPI in preprocessor defined symbols, this example drives
panel through QSPI interface.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemadc_darkening_effect/README.txt
 
Name:
=====
 nemadc_darkening_effect


Description:
============
 Darkening effect example.


This example demonstrates how to implement pull-down menu and darkening effects with DC.
This example only supports MIPI DSI interface.



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemadc_scrolling_effect/README.txt
 
Name:
=====
 nemadc_scrolling_effect


Description:
============
 Scrolling effect example.


This example demonstrates how to implement scrolling effect with DC.
This example only supports MIPI DSI interface.



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemadc_spi_configurations/README.txt
 
Name:
=====
 nemadc_spi_configurations


Description:
============
 NemaDC SPI4,DSPI and QSPI clock polarity/phase configurations example.


This example demonstrates how to drive a SPI4,DSPI,QSPI panel.

4-wire SPI includes 4 signals,
* Chip select (CSX)
* SPI clock (CLK)
* SPI bidirectional data interface (DATA)
* Data and command switch (DCX).

1P1T 2-wire Dual-SPI interface includes 4 signals,
* Chip select (CSX)
* SPI clock (CLK)
* Data interface 0 (DATA0)
* Data interface 1 (DATA1).

Quad-SPI interface includes 6 signals,
* Chip select (CSX)
* SPI clock (CLK)
* Data interface 0 (DATA0)
* Data interface 1 (DATA1).
* Data interface 2 (DATA2).
* Data interface 3 (DATA3).

When define TESTMODE_EN to 1, this example runs at test pattern mode.
When define TESTMODE_EN to 0, this example runs at image display mode.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_balls_bench/README.txt
 
Name:
=====
 nemagfx_balls_bench


Description:
============
 NemaGFX example.

This example created some random balls with alpha blending on the screen,
use
#define MAX_CIRCLE_NUM               (15)
to choose how many balls rendering on the screen

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.
@addtogroup graphics
@ingroup apollo4 graphics
@{


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_benchmarks/README.txt
 
Name:
=====
 nemagfx_benchmarks


Description:
============
 NemaGFX example.


this example demonstrate the Nema GPU and CPU performance use Nema GPU's
basic characteristics, we should care about the FPS after each individual
test.
need a timer to get the accurate time past.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_blend/README.txt
 
Name:
=====
 nemagfx_blend


Description:
============
 NemaGFX example.

brief Example that demonstrates blend feature
Blending requires a series of calculations between the source (foreground)
and destination (background)color fragments for producing the final color,
which will be written in memory.This example use a constent table inside
most of the supported blending mode.demonstrates each more every 1 second.
the dst color is nema_rgba(0xff, 0, 0, 0x80), which is red color with 50%
alpha blending, the src color is nema_rgba(0, 0, 0xff, 0x80), which is blue
color with 50% alpha blending.

Printing takes place over the ITM at 1M Baud.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_coverflow/README.txt
 
Name:
=====
 nemagfx_coverflow


Description:
============
 nemagfx_coverflow example.

this exampe demostration software AA at the edge of the picture


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_font_render/README.txt
 
Name:
=====
 nemagfx_font_render


Description:
============
 nemagfx_font_render example.


this example demonstrate 8 types of font,from alphabet to symbol,then to chinese.
with different alignment.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_gauge/README.txt
 


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_grad/README.txt
 
Name:
=====
 nemagfx_grad


Description:
============
 NemaGFX example.

In computer graphics, a color gradient specifies a range of position-dependent
colors, usually used to fill a region. For example, many window managers
allow the screen background to be specified as a gradient. The colors
produced by a gradient vary continuously with the position, producing smooth
color transitions.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_nemagui_ambiq_logo/README.txt
 
Name:
=====
 nemagfx_nemagui_ambiq_logo


Description:
============
 Example of the app running under NemaGFX gauge examples.

There is a guiBuilder
project file located in "src/NemaGUI_Builder_project", please use Nema guiBuilder
version 1.0.1 or higher to open it. If you have some application level
modifition from the guiBuilder and you want to demonstrate it on the board,
you need perform flowing two steps

1. copy the files from "src/NemaGUI_Builder_project/generated" into
"src/generated" except two source file should examine, those are
framebuffers.c
main.c

2. porting “framebuffers.c“ in GuiBuilder generated code into “nemagui_porting.h“
to change the framebuffers and screen resolution

Feel free to use any text comparison tools such as diff to see
the difference, and port all the differences into new generated code.
After that, you can compile the whole project again.

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_rotating_clock/README.txt
 
Name:
=====
 nemagfx_rotating_clock


Description:
============
 NemaGFX example.

this example use two frame buffer demonstrate a digital rotating clock,
with Nema GPU support, the shader effect continue shows while timer passing
need a timer to get the accurate time past.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_rotating_crate/README.txt
 
Name:
=====
 nemagfx_rotating_crate


Description:
============
 Example of the app running nemagfx rotating_crate.

this example shows a rotating crate with texture rending support. with Nema
GPU support, it can significantly reduce the general CPU effort to calculate
the data inside the frame buffer

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_transition_effects/README.txt
 
Name:
=====
 nemagfx_transition_effects


Description:
============
 this example use one frame buffer demonstrate two picture trasition

effect, with Nema GPU support, the effect include
NEMA_TRANS_LINEAR_H,
NEMA_TRANS_CUBE_H,
NEMA_TRANS_INNERCUBE_H,
NEMA_TRANS_STACK_H,
NEMA_TRANS_LINEAR_V,
NEMA_TRANS_CUBE_V,
NEMA_TRANS_INNERCUBE_V,
NEMA_TRANS_STACK_V,
NEMA_TRANS_FADE,
NEMA_TRANS_FADE_ZOOM,
NEMA_TRANS_MAX,
NEMA_TRANS_NONE

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_tsc_fb/README.txt
 
Name:
=====
 nemagfx_tsc_fb


Description:
============
 NemaGFX example.

Nemagfx_tsc_fb is a demo of TSC frame-buffer compression. The program uses
TSC4-compressed frame-buffer during run-time. It saves frame-buffer space
in RAM in a scale of 1:4 also.The demo use example NEMADC_TSC4 frame buffer
shows a 400x400 TSC4 image on the screen, it will significantly save RAM use.
Note:  the width and height of the frame-buffer should be 4-pixels aligned

AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_vg_circular_bar/README.txt
 
Name:
=====
 nemagfx_vg_circular_bar


Description:
============
 This example draw a circular bar image.See the watch_face.png in

resource folder.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_vg_paint/README.txt
 
Name:
=====
 nemagfx_vg_paint


Description:
============
 This example demonstrates the usage of various paint types provided

by NemaVG, including: linear gradient paint, texture paint, conic
gradient paint, color fill paint and outline-only paint.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_vg_svg/README.txt
 
Name:
=====
 nemagfx_vg_svg


Description:
============
 NemaGFX example.



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_vg_test/README.txt
 
Name:
=====
 nemagfx_vg_test


Description:
============
 This example include all the build-in VG demos in the NemaSDK.

Modified the macro defines in nemagfx_vg_test.h(line 64-71) to select
among the following demos.
<masking_example>: this demo shows how to use the masking feature with NemaVG.
<paint_example>: this demo shows how to use different paint features.
<paint_lut_example>: this demo shows how to use the LUT format texture
in the VG paint object.
<render_vg_font>: this demo shows how to render the TTF font with NemaVG.
<shape>: this demo shows various pre-defined shapes with different paint settings.
<text_transformation>: this demo shows how to move the text object by setting
different transform matrixes.
<tsvg_benchmark>: run the SVG benchmark by rotating a tiger head image in SVG format.
<tsvg_render_example>: render an SVG image that includes both shapes and fonts.
Note: Only one of the above macro defines can be enable.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_vg_ttf/README.txt
 
Name:
=====
 nemagfx_vg_ttf


Description:
============
 This example demonstrates the TTF font rendering features provided

by NemaVG, various text alignment features are also demonstrated.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/graphics/nemagfx_watchface/README.txt
 
Name:
=====
 nemagfx_watchface


Description:
============
 NemaGFX example.

this example uses one or two frame buffer demonstrate a digital Quartz clock, with
Nema GPU support, the shader effect continue shows while timer passing, the
function needs a timer to get the accurate time past.
AM_DEBUG_PRINTF
If enabled, debug messages will be sent over ITM.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/interfaces/mspi_ddr_octal_psram_example/README.txt
 
Name:
=====
 mspi_ddr_octal_psram_example


Description:
============
 Example of the MSPI operation with DDR OCTAL SPI PSRAM.


Purpose:
========
This example demonstrates MSPI DDR OCTAL operation using the PSRAM
device.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/interfaces/mspi_ddr_psram_loader/README.txt
 
Name:
=====
 mspi_ddr_psram_loader


Description:
============
 Example demonstrating how to load and run binary image to MSPI external DDR PSRAM.


Purpose:
========
The binary must be linked to run from MSPI PSRAM address range
(as specified by BIN_INSTALL_ADDR). The location and size of the binary
in internal flash are specified using BIN_ADDR_FLASH & BIN_SIZE

This example has been enhanced to use the new 'binary patching' feature
This example will not build if proper startup/linker files are not used.

Additional Information:
=======================
Prepare the example as follows:
1. Generate hello_world example to load and execute at MSPI PSRAM XIP location 0x14000000.
i. In the /examples/hello_world/iar directory modify the MRAM region as follows:
define region MCU_MRAM    = mem:[from 0x00018000 to 0x00200000];
define region MCU_MRAM    = mem:[from 0x14000000 to 0x18000000];
ii. Execute "make" in the /examples/hello_world/iar directory to rebuild the project.
2. Copy /examples/hello_world/iar/bin/hello_world.bin into /boards/common4/examples/interfaces/mspi_ddr_psram_loader/
3. Create the binary with mspi_ddr_psram_loader + external executable from Step #1.
./mspi_loader_binary_combiner.py --loaderbin iar/bin/mspi_ddr_psram_loader.bin --appbin hello_world.bin --install-address 0x14000000 --flags 0x2 --outbin loader_hello_world --loader-address 0x00018000
4. Open the J-Link SWO Viewer to the target board.
5. Open the J-Flash Lite program.  Select the /examples/interfaces/mspi_ddr_psram_loader/loader_hello_world.bin file and program at 0x00018000 offset.

If Apollo4 EB board and DDR PSRAM daughter board are used, this example can work on:
Plugin DDR PSRAM daughter board to Apollo4 EB board, press SW2 button for 7 times to switch to the DDR PSRAM.



******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/interfaces/mspi_ds35x1ga_quad_example/README.txt
 
Name:
=====
 mspi_ds35x1ga_quad_example


Description:
============
 Example of the MSPI operation with Quad SPI NAND Flash.


Purpose:
========
This example configures an MSPI connected NAND flash device in Quad mode
and performs various operations - verifying the correctness of the same
Operations include - Erase, Write, Read.

Printing takes place over the ITM at 1M Baud.

Additional Information:
=======================
this example can work on:
Apollo4l_eb


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/interfaces/mspi_hex_ddr_aps25616n_psram_example/README.txt
 
Name:
=====
 mspi_hex_ddr_aps25616n_psram_example


Description:
============
 Example of the MSPI operation with DDR HEX SPI PSRAM APS25616N.


Purpose:
========
This example demonstrates MSPI DDR HEX operation using the APS25616N
PSRAM device.

Additional Information:
=======================
To enable debug printing, add the following project-level macro definitions.

AM_DEBUG_PRINTF

When defined, debug messages will be sent over ITM/SWO at 1M Baud.

Note that when these macros are defined, the device will never achieve deep
sleep, only normal sleep, due to the ITM (and thus the HFRC) being enabled.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/interfaces/mspi_octal_example/README.txt
 
Name:
=====
 mspi_octal_example


Description:
============
 Example of the MSPI operation with Octal SPI Flash.

@{
Purpose:
========
This example configures an MSPI connected flash device in Octal DDR
mode and performs various operations - verifying the correctness of the same
Operations include - Erase, Write, Read, and XIP

Printing takes place over the ITM at 1M Baud.




******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/power/coremark_pro/README.txt
 
Name:
=====
 coremark_pro


Description:
============
 EEMBC COREMARK PRO test.


Purpose:
========
This example runs the official EEMBC COREMARK PRO test.

CoreMark®-PRO is a comprehensive, advanced processor benchmark that works 
with and enhances the market-proven industry-standard EEMBC CoreMark® benchmark. 
While CoreMark stresses the CPU pipeline, CoreMark-PRO tests the entire 
processor, adding comprehensive support for multicore technology, a combination 
of integer and floating-point workloads, and data sets for utilizing larger 
memory subsystems. Together, EEMBC CoreMark and CoreMark-PRO provide a standard 
benchmark covering the spectrum from low-end microcontrollers to high-performance 
computing processors.

The EEMBC CoreMark-PRO benchmark contains five prevalent integer workloads and 
four popular floating-point workloads. 

The integer workloads include:

* JPEG compression
* ZIP compression
* XML parsing
* SHA-256 Secure Hash Algorithm
* A more memory-intensive version of the original CoreMark

The floating-point workloads include:

* Radix-2 Fast Fourier Transform (FFT)
* Gaussian elimination with partial pivoting derived from LINPACK
* A simple neural-net
* A greatly improved version of the Livermore loops benchmark using the following 24 FORTRAN 
kernels converted to C (all of these reported as a single score of the `loops.c` workload). 
The standard Livermore loops include:
*   Kernel 1 -- hydro fragment
*   Kernel 2 -- ICCG excerpt (Incomplete Cholesky Conjugate Gradient)
*   Kernel 3 -- inner product
*   Kernel 4 -- banded linear equations
*   Kernel 5 -- tri-diagonal elimination, below diagonal
*   Kernel 6 -- general linear recurrence equations
*   Kernel 7 -- equation of state fragment
*   Kernel 8 -- ADI integration
*   Kernel 9 -- integrate predictors
*   Kernel 10 -- difference predictors
*   Kernel 11 -- first sum
*   Kernel 12 -- first difference
*   Kernel 13 -- 2-D PIC (Particle In Cell)
*   Kernel 14 -- 1-D PIC (pticle In Cell)
*   Kernel 15 -- Casual Fortran.
*   Kernel 16 -- Monte Carlo search loop
*   Kernel 17 -- implicit, conditional computation
*   Kernel 18 -- 2-D explicit hydrodynamics fragment
*   Kernel 19 -- general linear recurrence equations
*   Kernel 20 -- Discrete ordinates transport, conditional recurrence on xx
*   Kernel 21 -- matrix*matrix product
*   Kernel 22 -- Planckian distribution
*   Kernel 23 -- 2-D implicit hydrodynamics fragment
*   Kernel 24 -- find location of first minimum in array

More info may be found at the [EEMBC CoreMark-PRO website](https://www.eembc.org/coremark-pro/).

The Coremark run begins by first outputing a banner (to the SWO)
indicating that it has started.

Text is output to the SWO at 1M bitrate.


******************************************************************************


 
Example ./apollo4p_evb_disp_shield_rev2/examples/usb/tinyusb_cdc_msc_emmc/README.txt
 
Name:
=====
 tinyusb_cdc_msc


Description:
============
 tinyusb cdc-acm and mass storage USB example (this example needs eMMC card).


This example demonstrates a composite USB device including one USB CDC-ACM
and one mass storage device. the COM port will echo back the
the input from the terminal and the mass storage device will be disk when
connecting to other OS like Windows and Linux.




******************************************************************************


 
